{"version":3,"sources":["webpack:///./src/views/Tools.vue","webpack:///./src/components/forms/ToolsBurnForm.vue","webpack:///./src/components/forms/ToolsBurnForm.vue?194e","webpack:///./src/components/forms/ToolsBurnForm.vue?6c36","webpack:///./src/components/forms/ToolsVodDownloadForm.vue","webpack:///./src/components/forms/ToolsVodDownloadForm.vue?ffe7","webpack:///./src/components/forms/ToolsVodDownloadForm.vue?bbcf","webpack:///./src/components/forms/ToolsChatDownloadForm.vue","webpack:///./src/components/forms/ToolsChatDownloadForm.vue?ac37","webpack:///./src/components/forms/ToolsChatDownloadForm.vue?7232","webpack:///./src/views/Tools.vue?c4f7","webpack:///./src/views/Tools.vue?4427","webpack:///./node_modules/core-js/modules/web.dom-collections.iterator.js","webpack:///./node_modules/core-js/internals/dom-iterables.js"],"names":["class","jobsData","job","key","name","pid","status","killJob","length","type","value","method","submitForm","twitchQuality","quality","formStatusClass","formStatusText","emits","data","formStatus","formData","methods","event","form","target","inputs","FormData","this","console","log","entries","values","fetch","body","then","response","json","message","$emit","catch","err","error","preventDefault","computed","render","fileLink","href","web_path","created","fetchData","jobs","alert","components","ToolsBurnForm","ToolsVodDownloadForm","ToolsChatDownloadForm","global","DOMIterables","ArrayIteratorMethods","createNonEnumerableProperty","wellKnownSymbol","ITERATOR","TO_STRING_TAG","ArrayValues","COLLECTION_NAME","Collection","CollectionPrototype","prototype","METHOD_NAME","module","exports","CSSRuleList","CSSStyleDeclaration","CSSValueList","ClientRectList","DOMRectList","DOMStringList","DOMTokenList","DataTransferItemList","FileList","HTMLAllCollection","HTMLCollection","HTMLFormElement","HTMLSelectElement","MediaList","MimeTypeArray","NamedNodeMap","NodeList","PaintRequestList","Plugin","PluginArray","SVGLengthList","SVGNumberList","SVGPathSegList","SVGPointList","SVGStringList","SVGTransformList","SourceBufferList","StyleSheetList","TextTrackCueList","TextTrackList","TouchList"],"mappings":"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","file":"js/tools.40833175.js","sourcesContent":["<template>\r\n    <div class=\"container\">\r\n        \r\n        <section class=\"section\">\r\n            <div class=\"section-title\"><h1>Full VOD fetch and burn chat</h1></div>\r\n            <div class=\"section-content\">\r\n                <tools-burn-form />\r\n            </div>\r\n        </section>\r\n\r\n        <section class=\"section\">\r\n            <div class=\"section-title\"><h1>VOD download</h1></div>\r\n            <div class=\"section-content\">\r\n                <tools-vod-download-form />\r\n            </div>\r\n        </section>\r\n\r\n        <section class=\"section\">\r\n            <div class=\"section-title\"><h1>Chat download</h1></div>\r\n            <div class=\"section-content\">\r\n                <tools-chat-download-form />\r\n            </div>\r\n        </section>\r\n\r\n        <!--\r\n        <section class=\"section\">\r\n            <div class=\"section-title\"><h1>Saved VODs</h1></div>\r\n            <div class=\"section-content\">\r\n                \r\n                {% if saved_vods %}\r\n                    <ul>\r\n                    {% for vod in saved_vods %}\r\n                        <li><a href=\"{{ base_path() }}/saved_vods/{{ vod.name }}\">{{ vod.name }}</a> ({{ formatBytes(vod.size) }})</li>\r\n                    {% endfor %}\r\n                    </ul>\r\n                {% else %}\r\n                    <em>None</em>\r\n                {% endif %}\r\n\r\n            </div>\r\n        </section>\r\n        -->\r\n\r\n        <section class=\"section\">\r\n            <div class=\"section-title\"><h1>Current jobs</h1></div>\r\n            <div class=\"section-content\">\r\n\r\n                <table>\r\n                    <tr v-for=\"job in jobsData\" :key=\"job.name\">\r\n                        <td>{{ job.name }}</td>\r\n                        <td>{{ job.pid }}</td>\r\n                        <td><!-- {{ job.status }}-->{{ job.status ? 'Running' : 'Unexpected exit' }}</td>\r\n                        <td><a v-if=\"job.status\" @click=\"killJob(job.name)\">Kill</a></td>\r\n                    </tr>\r\n                </table>\r\n                <em v-if=\"jobsData.length == 0\">None</em>\r\n            </div>\r\n        </section>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n\r\nimport { defineComponent } from \"vue\";\r\n\r\nimport ToolsBurnForm from \"@/components/forms/ToolsBurnForm.vue\";\r\nimport ToolsVodDownloadForm from \"@/components/forms/ToolsVodDownloadForm.vue\";\r\nimport ToolsChatDownloadForm from \"@/components/forms/ToolsChatDownloadForm.vue\";\r\n\r\nexport default defineComponent({\r\n    name: \"Tools\",\r\n    data() {\r\n        return {\r\n            jobsData: {}\r\n        };\r\n    },\r\n    created() {\r\n        this.fetchData();\r\n    },\r\n    methods: {\r\n        fetchData() {\r\n            \r\n            // this.settingsData = [];\r\n            // this.settingsFields = [] as any;\r\n\r\n            fetch(\"/api/v0/jobs/list\")\r\n            .then((response) => response.json())\r\n            .then((json) => {\r\n                const jobs = json.data;\r\n                this.jobsData = jobs;\r\n            });\r\n\r\n        },\r\n        killJob( name:string ){\r\n            alert(\"kill\" + name);\r\n        },\r\n    },\r\n    components: {\r\n        ToolsBurnForm,\r\n        ToolsVodDownloadForm,\r\n        ToolsChatDownloadForm\r\n    }\r\n});\r\n</script>\r\n","<template>\r\n    <form method=\"POST\" @submit=\"submitForm\">\r\n\r\n        <div class=\"field\">\r\n            <label class=\"label\">VOD URL</label>\r\n            <div class=\"control\">\r\n                <input class=\"input input-required\" type=\"text\" name=\"url\" value=\"\" />\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n            <label class=\"label\">Quality</label>\r\n            <div class=\"control\">\r\n                <select class=\"input input-required\" name=\"quality\">\r\n                    <option v-for=\"quality in twitchQuality\" :key=\"quality\">{{ quality }}</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n            <div class=\"control\">\r\n                <button class=\"button is-confirm\" type=\"submit\"><span class=\"icon\"><i class=\"fa fa-burn\"></i></span> Execute</button>\r\n                <span :class=\"formStatusClass\">{{ formStatusText }}</span>\r\n            </div>\r\n        </div>\r\n\r\n    </form>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from \"vue\";\r\n\r\nexport default defineComponent({\r\n    name: \"ToolsBurnForm\",\r\n    emits: ['formSuccess'],\r\n    data(){\r\n        return {\r\n            formStatusText: 'Ready',\r\n            formStatus: '',\r\n            formData: {}\r\n        }\r\n    },\r\n    methods: {\r\n        submitForm( event : Event ){\r\n            \r\n            const form = event.target as HTMLFormElement;\r\n            const inputs = new FormData(form);\r\n\r\n            this.formStatusText = 'Loading...';\r\n            this.formStatus = '';\r\n\r\n            console.log( \"form\", form );\r\n            console.log( \"entries\", inputs, inputs.entries(), inputs.values() );            \r\n\r\n            fetch(`/api/v0/###`, {\r\n                method: 'POST',\r\n                body: inputs\r\n            })\r\n            .then((response) => response.json())\r\n            .then((json) => {\r\n                this.formStatusText = json.message;\r\n                this.formStatus = json.status;\r\n                if(json.status == 'OK'){\r\n                    this.$emit('formSuccess', json);\r\n                }\r\n            }).catch((err) => {\r\n                console.error(\"Error burn form\", err);\r\n                this.formStatusText = err;\r\n                this.formStatus = 'ERROR';\r\n            });\r\n\r\n            event.preventDefault();\r\n            return false;\r\n        }\r\n    },\r\n    computed: {\r\n        formStatusClass() : Record<string, any> {\r\n            return {\r\n                'form-status': true,\r\n                'is-error': this.formStatus == 'ERROR',\r\n                'is-success': this.formStatus == 'OK',\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n</script>","\r\nimport { defineComponent } from \"vue\";\r\n\r\nexport default defineComponent({\r\n    name: \"ToolsBurnForm\",\r\n    emits: ['formSuccess'],\r\n    data(){\r\n        return {\r\n            formStatusText: 'Ready',\r\n            formStatus: '',\r\n            formData: {}\r\n        }\r\n    },\r\n    methods: {\r\n        submitForm( event : Event ){\r\n            \r\n            const form = event.target as HTMLFormElement;\r\n            const inputs = new FormData(form);\r\n\r\n            this.formStatusText = 'Loading...';\r\n            this.formStatus = '';\r\n\r\n            console.log( \"form\", form );\r\n            console.log( \"entries\", inputs, inputs.entries(), inputs.values() );            \r\n\r\n            fetch(`/api/v0/###`, {\r\n                method: 'POST',\r\n                body: inputs\r\n            })\r\n            .then((response) => response.json())\r\n            .then((json) => {\r\n                this.formStatusText = json.message;\r\n                this.formStatus = json.status;\r\n                if(json.status == 'OK'){\r\n                    this.$emit('formSuccess', json);\r\n                }\r\n            }).catch((err) => {\r\n                console.error(\"Error burn form\", err);\r\n                this.formStatusText = err;\r\n                this.formStatus = 'ERROR';\r\n            });\r\n\r\n            event.preventDefault();\r\n            return false;\r\n        }\r\n    },\r\n    computed: {\r\n        formStatusClass() : Record<string, any> {\r\n            return {\r\n                'form-status': true,\r\n                'is-error': this.formStatus == 'ERROR',\r\n                'is-success': this.formStatus == 'OK',\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n","import { render } from \"./ToolsBurnForm.vue?vue&type=template&id=0f227500\"\nimport script from \"./ToolsBurnForm.vue?vue&type=script&lang=ts\"\nexport * from \"./ToolsBurnForm.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\r\n    <form method=\"POST\" @submit=\"submitForm\">\r\n\r\n        <div class=\"field\">\r\n            <label class=\"label\">VOD URL</label>\r\n            <div class=\"control\">\r\n                <input class=\"input input-required\" type=\"text\" name=\"url\" value=\"\" />\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n            <label class=\"label\">Quality</label>\r\n            <div class=\"control\">\r\n                <select class=\"input input-required\" name=\"quality\">\r\n                    <option v-for=\"quality in twitchQuality\" :key=\"quality\">{{ quality }}</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n            <div class=\"control\">\r\n                <button class=\"button is-confirm\" type=\"submit\"><span class=\"icon\"><i class=\"fa fa-download\"></i></span> Execute</button>\r\n                <span :class=\"formStatusClass\">{{ formStatusText }}</span>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"field\" v-if=\"fileLink\">\r\n            <a :href=\"fileLink\">{{ fileLink }}</a>\r\n        </div>\r\n\r\n    </form>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from \"vue\";\r\n\r\nexport default defineComponent({\r\n    name: \"ToolsVodDownloadForm\",\r\n    emits: ['formSuccess'],\r\n    data(){\r\n        return {\r\n            formStatusText: 'Ready',\r\n            formStatus: '',\r\n            fileLink: ''\r\n        }\r\n    },\r\n    methods: {\r\n        submitForm( event : Event ){\r\n            \r\n            const form = event.target as HTMLFormElement;\r\n            const inputs = new FormData(form);\r\n\r\n            this.formStatusText = 'Loading...';\r\n            this.formStatus = '';\r\n\r\n            console.log( \"form\", form );\r\n            console.log( \"entries\", inputs, inputs.entries(), inputs.values() );            \r\n\r\n            fetch(`/api/v0/tools/voddownload`, {\r\n                method: 'POST',\r\n                body: inputs\r\n            })\r\n            .then((response) => response.json())\r\n            .then((json) => {\r\n                this.formStatusText = json.message;\r\n                this.formStatus = json.status;\r\n                if(json.status == 'OK'){\r\n                    this.$emit('formSuccess', json);\r\n                }\r\n                if(json.data && json.data.web_path){\r\n                    this.fileLink = json.data.web_path;\r\n                }\r\n            }).catch((err) => {\r\n                console.error(\"Error burn form\", err);\r\n                this.formStatusText = err;\r\n                this.formStatus = 'ERROR';\r\n            });\r\n\r\n            event.preventDefault();\r\n            return false;\r\n        }\r\n    },\r\n    computed: {\r\n        formStatusClass() : Record<string, any> {\r\n            return {\r\n                'form-status': true,\r\n                'is-error': this.formStatus == 'ERROR',\r\n                'is-success': this.formStatus == 'OK',\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n</script>","\r\nimport { defineComponent } from \"vue\";\r\n\r\nexport default defineComponent({\r\n    name: \"ToolsVodDownloadForm\",\r\n    emits: ['formSuccess'],\r\n    data(){\r\n        return {\r\n            formStatusText: 'Ready',\r\n            formStatus: '',\r\n            fileLink: ''\r\n        }\r\n    },\r\n    methods: {\r\n        submitForm( event : Event ){\r\n            \r\n            const form = event.target as HTMLFormElement;\r\n            const inputs = new FormData(form);\r\n\r\n            this.formStatusText = 'Loading...';\r\n            this.formStatus = '';\r\n\r\n            console.log( \"form\", form );\r\n            console.log( \"entries\", inputs, inputs.entries(), inputs.values() );            \r\n\r\n            fetch(`/api/v0/tools/voddownload`, {\r\n                method: 'POST',\r\n                body: inputs\r\n            })\r\n            .then((response) => response.json())\r\n            .then((json) => {\r\n                this.formStatusText = json.message;\r\n                this.formStatus = json.status;\r\n                if(json.status == 'OK'){\r\n                    this.$emit('formSuccess', json);\r\n                }\r\n                if(json.data && json.data.web_path){\r\n                    this.fileLink = json.data.web_path;\r\n                }\r\n            }).catch((err) => {\r\n                console.error(\"Error burn form\", err);\r\n                this.formStatusText = err;\r\n                this.formStatus = 'ERROR';\r\n            });\r\n\r\n            event.preventDefault();\r\n            return false;\r\n        }\r\n    },\r\n    computed: {\r\n        formStatusClass() : Record<string, any> {\r\n            return {\r\n                'form-status': true,\r\n                'is-error': this.formStatus == 'ERROR',\r\n                'is-success': this.formStatus == 'OK',\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n","import { render } from \"./ToolsVodDownloadForm.vue?vue&type=template&id=3af77f12\"\nimport script from \"./ToolsVodDownloadForm.vue?vue&type=script&lang=ts\"\nexport * from \"./ToolsVodDownloadForm.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\r\n    <form method=\"POST\" @submit=\"submitForm\">\r\n\r\n        <div class=\"field\">\r\n            <label class=\"label\">VOD URL</label>\r\n            <div class=\"control\">\r\n                <input class=\"input input-required\" type=\"text\" name=\"url\" value=\"\" />\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"field\">\r\n            <div class=\"control\">\r\n                <button class=\"button is-confirm\" type=\"submit\"><span class=\"icon\"><i class=\"fa fa-download\"></i></span> Execute</button>\r\n                <span :class=\"formStatusClass\">{{ formStatusText }}</span>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"field\" v-if=\"fileLink\">\r\n            <a :href=\"fileLink\">{{ fileLink }}</a>\r\n        </div>\r\n\r\n    </form>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from \"vue\";\r\n\r\nexport default defineComponent({\r\n    name: \"ToolsVodDownloadForm\",\r\n    emits: ['formSuccess'],\r\n    data(){\r\n        return {\r\n            formStatusText: 'Ready',\r\n            formStatus: '',\r\n            fileLink: ''\r\n        }\r\n    },\r\n    methods: {\r\n        submitForm( event : Event ){\r\n            \r\n            const form = event.target as HTMLFormElement;\r\n            const inputs = new FormData(form);\r\n\r\n            this.formStatusText = 'Loading...';\r\n            this.formStatus = '';\r\n\r\n            console.log( \"form\", form );\r\n            console.log( \"entries\", inputs, inputs.entries(), inputs.values() );            \r\n\r\n            fetch(`/api/v0/tools/chatdownload`, {\r\n                method: 'POST',\r\n                body: inputs\r\n            })\r\n            .then((response) => response.json())\r\n            .then((json) => {\r\n                this.formStatusText = json.message;\r\n                this.formStatus = json.status;\r\n                if(json.status == 'OK'){\r\n                    this.$emit('formSuccess', json);\r\n                }\r\n                if(json.data && json.data.web_path){\r\n                    this.fileLink = json.data.web_path;\r\n                }\r\n            }).catch((err) => {\r\n                console.error(\"Error burn form\", err);\r\n                this.formStatusText = err;\r\n                this.formStatus = 'ERROR';\r\n            });\r\n\r\n            event.preventDefault();\r\n            return false;\r\n        }\r\n    },\r\n    computed: {\r\n        formStatusClass() : Record<string, any> {\r\n            return {\r\n                'form-status': true,\r\n                'is-error': this.formStatus == 'ERROR',\r\n                'is-success': this.formStatus == 'OK',\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n</script>","\r\nimport { defineComponent } from \"vue\";\r\n\r\nexport default defineComponent({\r\n    name: \"ToolsVodDownloadForm\",\r\n    emits: ['formSuccess'],\r\n    data(){\r\n        return {\r\n            formStatusText: 'Ready',\r\n            formStatus: '',\r\n            fileLink: ''\r\n        }\r\n    },\r\n    methods: {\r\n        submitForm( event : Event ){\r\n            \r\n            const form = event.target as HTMLFormElement;\r\n            const inputs = new FormData(form);\r\n\r\n            this.formStatusText = 'Loading...';\r\n            this.formStatus = '';\r\n\r\n            console.log( \"form\", form );\r\n            console.log( \"entries\", inputs, inputs.entries(), inputs.values() );            \r\n\r\n            fetch(`/api/v0/tools/chatdownload`, {\r\n                method: 'POST',\r\n                body: inputs\r\n            })\r\n            .then((response) => response.json())\r\n            .then((json) => {\r\n                this.formStatusText = json.message;\r\n                this.formStatus = json.status;\r\n                if(json.status == 'OK'){\r\n                    this.$emit('formSuccess', json);\r\n                }\r\n                if(json.data && json.data.web_path){\r\n                    this.fileLink = json.data.web_path;\r\n                }\r\n            }).catch((err) => {\r\n                console.error(\"Error burn form\", err);\r\n                this.formStatusText = err;\r\n                this.formStatus = 'ERROR';\r\n            });\r\n\r\n            event.preventDefault();\r\n            return false;\r\n        }\r\n    },\r\n    computed: {\r\n        formStatusClass() : Record<string, any> {\r\n            return {\r\n                'form-status': true,\r\n                'is-error': this.formStatus == 'ERROR',\r\n                'is-success': this.formStatus == 'OK',\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n","import { render } from \"./ToolsChatDownloadForm.vue?vue&type=template&id=0f4d4efe\"\nimport script from \"./ToolsChatDownloadForm.vue?vue&type=script&lang=ts\"\nexport * from \"./ToolsChatDownloadForm.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\r\n\r\nimport { defineComponent } from \"vue\";\r\n\r\nimport ToolsBurnForm from \"@/components/forms/ToolsBurnForm.vue\";\r\nimport ToolsVodDownloadForm from \"@/components/forms/ToolsVodDownloadForm.vue\";\r\nimport ToolsChatDownloadForm from \"@/components/forms/ToolsChatDownloadForm.vue\";\r\n\r\nexport default defineComponent({\r\n    name: \"Tools\",\r\n    data() {\r\n        return {\r\n            jobsData: {}\r\n        };\r\n    },\r\n    created() {\r\n        this.fetchData();\r\n    },\r\n    methods: {\r\n        fetchData() {\r\n            \r\n            // this.settingsData = [];\r\n            // this.settingsFields = [] as any;\r\n\r\n            fetch(\"/api/v0/jobs/list\")\r\n            .then((response) => response.json())\r\n            .then((json) => {\r\n                const jobs = json.data;\r\n                this.jobsData = jobs;\r\n            });\r\n\r\n        },\r\n        killJob( name:string ){\r\n            alert(\"kill\" + name);\r\n        },\r\n    },\r\n    components: {\r\n        ToolsBurnForm,\r\n        ToolsVodDownloadForm,\r\n        ToolsChatDownloadForm\r\n    }\r\n});\r\n","import { render } from \"./Tools.vue?vue&type=template&id=1581b67e\"\nimport script from \"./Tools.vue?vue&type=script&lang=ts\"\nexport * from \"./Tools.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","var global = require('../internals/global');\nvar DOMIterables = require('../internals/dom-iterables');\nvar ArrayIteratorMethods = require('../modules/es.array.iterator');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar TO_STRING_TAG = wellKnownSymbol('toStringTag');\nvar ArrayValues = ArrayIteratorMethods.values;\n\nfor (var COLLECTION_NAME in DOMIterables) {\n  var Collection = global[COLLECTION_NAME];\n  var CollectionPrototype = Collection && Collection.prototype;\n  if (CollectionPrototype) {\n    // some Chrome versions have non-configurable methods on DOMTokenList\n    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {\n      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);\n    } catch (error) {\n      CollectionPrototype[ITERATOR] = ArrayValues;\n    }\n    if (!CollectionPrototype[TO_STRING_TAG]) {\n      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);\n    }\n    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {\n      // some Chrome versions have non-configurable methods on DOMTokenList\n      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {\n        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);\n      } catch (error) {\n        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];\n      }\n    }\n  }\n}\n","// iterable DOM collections\n// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\nmodule.exports = {\n  CSSRuleList: 0,\n  CSSStyleDeclaration: 0,\n  CSSValueList: 0,\n  ClientRectList: 0,\n  DOMRectList: 0,\n  DOMStringList: 0,\n  DOMTokenList: 1,\n  DataTransferItemList: 0,\n  FileList: 0,\n  HTMLAllCollection: 0,\n  HTMLCollection: 0,\n  HTMLFormElement: 0,\n  HTMLSelectElement: 0,\n  MediaList: 0,\n  MimeTypeArray: 0,\n  NamedNodeMap: 0,\n  NodeList: 1,\n  PaintRequestList: 0,\n  Plugin: 0,\n  PluginArray: 0,\n  SVGLengthList: 0,\n  SVGNumberList: 0,\n  SVGPathSegList: 0,\n  SVGPointList: 0,\n  SVGStringList: 0,\n  SVGTransformList: 0,\n  SourceBufferList: 0,\n  StyleSheetList: 0,\n  TextTrackCueList: 0,\n  TextTrackList: 0,\n  TouchList: 0\n};\n"],"sourceRoot":""}